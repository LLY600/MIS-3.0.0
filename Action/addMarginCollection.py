'''
单独封装添加保证金
'''

from PageObject.addMarginCollectionPage import *
# from selenium.webdriver import ActionChains
from PageObject.tableDataPage import *
from toolKit.log import *
from time import sleep
from toolKit.highLightElement import *
from prettytable import PrettyTable
# import allure


def add_margin_collection_data(driver, merchant='', contract='', paymentTime='', feeItem='', currentPaymentMoney='',
                               PaymentMoney='', deposit='', type='', paymentType=''):
	amc = AddMarginCollectionPage(driver)
	logger.info(u'测试添加保证金')
	amc.financialManagement().click()
	logger.info(u'点击财务管理')
	amc.marginManagement().click()
	logger.info(u'点击保证金管理')
	amc.marginCollection().click()
	logger.info(u'点击保证金收取列表')
	driver.switch_to.frame(amc.frameOfMarginCollection())
	sleep(5)
	highLightElement(driver, amc.add())
	amc.add().click()
	logger.info(u'点击添加按钮')
	driver.switch_to.default_content()
	driver.switch_to.frame(amc.frameOfaddMarginCollection())
	sleep(2)
	# 部分系统购物中心数据默认填写，这里需捕获异常
	try:
		highLightElement(driver, amc.mallBox())
		amc.mallName().click()
		amc.mallNameSelect().click()
		logger.info(u'选择购物中心')
	except:
		pass
	highLightElement(driver, amc.merchantNameBox())
	amc.merchantName().click()
	amc.merchantNameInput().send_keys(merchant)
	logger.info(u'输入商户名称：%s' % merchant)
	highLightElement(driver, amc.merchantSearch())
	amc.merchantSearch().click()
	sleep(1)
	highLightElement(driver, amc.merchantSearchResult())
	amc.merchantSearchResult().click()
	highLightElement(driver, amc.contractNameBox())
	amc.contractName().click()
	amc.contractNameInput().send_keys(contract)
	logger.info(u'输入合同号：%s' % contract)
	highLightElement(driver, amc.contractSearch())
	amc.contractSearch().click()
	sleep(1)
	highLightElement(driver, amc.contractSearchResult())
	amc.contractSearchResult().click()
	highLightElement(driver, amc.paymentTimeBox())
	amc.paymentTime().send_keys(paymentTime)
	logger.info(u'输入收款日期：%s' % paymentTime)
	highLightElement(driver, amc.addMargin())
	amc.addMargin().click()
	logger.info(u'点击增加保证金')
	if deposit == '是' and type == '1':
		highLightElement(driver, amc.feeItemBox2())
		amc.feeItemBox2().click()
		logger.info(u'点击费用项目文本框')
		sleep(0.5)
		amc.feeItem2().click()
		# highLightElement(driver, amc.feeItemInput())
		amc.feeItemInput().send_keys(feeItem)
		logger.info(u'输入费用项目')
		highLightElement(driver, amc.feeItemSearch())
		sleep(1)
		amc.feeItemSearch().click()
		logger.info(u'点击费用项目搜索按钮')
		highLightElement(driver, amc.feeItemSearchResult())
		amc.feeItemSearchResult().click()
		logger.info(u'选择费用项目搜索结果')
		highLightElement(driver, amc.currentPaymentMoneyBox2())
		amc.currentPaymentMoneyBox2().click()
		sleep(1)
		amc.currentPaymentMoney2().clear()
		amc.currentPaymentMoney2().send_keys(currentPaymentMoney)
		logger.info(u'输入本次收款金额：%s' % currentPaymentMoney)
	elif deposit == '是' and type == '2':
		highLightElement(driver, amc.feeItemBox3())
		amc.feeItem3().click()
		logger.info(u'点击费用项目文本框')
		sleep(0.5)
		amc.feeItem3().click()
		highLightElement(driver, amc.feeItemInput())
		amc.feeItemInput().send_keys(feeItem)
		logger.info(u'输入费用项目')
		highLightElement(driver, amc.feeItemSearch())
		amc.feeItemSearch().click()
		logger.info(u'点击费用项目搜索按钮')
		highLightElement(driver, amc.feeItemSearchResult())
		amc.feeItemSearchResult().click()
		logger.info(u'选择费用项目搜索结果')
		highLightElement(driver, amc.currentPaymentMoneyBox3())
		amc.currentPaymentMoneyBox3().click()
		sleep(1)
		amc.currentPaymentMoney3().clear()
		amc.currentPaymentMoney3().send_keys(currentPaymentMoney)
		logger.info(u'输入本次收款金额：%s' % currentPaymentMoney)
	else:
		highLightElement(driver, amc.feeItemBox1())
		amc.feeItem1().click()
		logger.info(u'点击费用项目文本框')
		sleep(0.5)
		amc.feeItem1().click()
		highLightElement(driver, amc.feeItemInput())
		amc.feeItemInput().send_keys(feeItem)
		logger.info(u'输入费用项目')
		highLightElement(driver, amc.feeItemSearch())
		amc.feeItemSearch().click()
		logger.info(u'点击费用项目搜索按钮')
		highLightElement(driver, amc.feeItemSearchResult())
		amc.feeItemSearchResult().click()
		logger.info(u'选择费用项目搜索结果')
		highLightElement(driver, amc.currentPaymentMoneyBox1())
		amc.currentPaymentMoneyBox1().click()
		sleep(1)
		amc.currentPaymentMoney1().clear()
		amc.currentPaymentMoney1().send_keys(currentPaymentMoney)
		logger.info(u'输入本次收款金额：%s' % currentPaymentMoney)
	highLightElement(driver, amc.addRow())
	amc.addRow().click()
	highLightElement(driver, amc.paymentMethodBox1())
	amc.paymentMethodBox1().click()
	sleep(0.5)
	amc.paymentMethod1().click()
	if paymentType == 'AT_支付宝':
		highLightElement(driver, amc.paymentMethodSelect1())
		amc.paymentMethodSelect1().click()
	elif paymentType == 'AT_微信':
		highLightElement(driver, amc.paymentMethodSelect2())
		amc.paymentMethodSelect2().click()
	elif paymentType == 'AT_现金':
		highLightElement(driver, amc.paymentMethodSelect3())
		amc.paymentMethodSelect3().click()
	else:
		highLightElement(driver, amc.paymentMethodSelect4())
		amc.paymentMethodSelect4().click()
	highLightElement(driver, amc.paymentMoneyBox1())
	amc.paymentMoneyBox1().click()
	sleep(0.5)
	amc.paymentMoney1().click()
	amc.paymentMoney1().clear()
	amc.paymentMoney1().send_keys(PaymentMoney)
	logger.info(u'输入收款金额：%s' % PaymentMoney)
	highLightElement(driver, amc.save())
	amc.save().click()
	logger.info(u'点击保存按钮')
	time.sleep(0.5)
	highLightElement(driver, amc.confirm())
	amc.confirm().click()
	logger.info(u'点击确认按钮')
	logger.info(u'提示信息：%s' % amc.information())



def get_margin_collection_data(driver, contract=''):  # 获取保证金列表数据
	amc = AddMarginCollectionPage(driver)
	sleep(1)
	amc.close().click()
	driver.switch_to.default_content()
	driver.switch_to.frame(amc.frameOfMarginCollection())
	sleep(2)
	amc.contract().click()
	amc.contractNameInput().send_keys(contract)
	amc.contractSearch2().click()
	sleep(0.5)
	amc.contractSearch2Result().click()
	amc.search().click()
	sleep(2)
	fileName = listData + 'add_margin_collection_data.log'
	gtd = GetTableData(driver)
	table = PrettyTable(['购物中心', '状态', '类别', '合同号', '经营商户', '经营店铺', '收款金额', '收款时间'])
	table.align['购物中心'] = '1'
	table.padding_width = 1
	table.add_row([gtd.row15(), gtd.row16(), gtd.row17(), gtd.row18(), gtd.row19(), gtd.row110(), gtd.row111(), gtd.row112()])
	logger.info(u'正在获取列表数据')
	sleep(2)
	print(table)
	with open(fileName, 'w') as file:
		file.write(str(table))
		file.write('\n')
	logger.info(u'保存位置:%s' % fileName)
